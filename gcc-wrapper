#!/bin/sh

# $Id: gcc-wrapper,v 1.7 2004-01-22 09:51:17-08 kst Exp $
# $Source: /home/kst/CVS_smov/tools/gcc-wrapper/gcc-wrapper,v $

#
# gcc-wrapper
#
# Invoke gcc with specified arguments, sending stdout to stdout and
# stderr to stderr and returning gcc's exit status.
#
# Filter out any occurrences of $msg1 or $msg2 (see below) on stderr.
#
# This is a workaround for Globus Bugzilla # 488,
# <http://bugzilla.globus.org/bugzilla/show_bug.cgi?id=488>
# See also <http://www.sdsc.edu/~kst/gcc-3.2-bug/>
#
# Note that all of gcc's stdout is written first, followed by stderr (with
# the specified messages filtered out).  This should be ok; anything that
# inovkes gcc shouldn't depend on stdout and stderr being interspersed.
#
# If gcc is killed by a signal, I *think* gcc-wrapper will return a
# status of (128 + signal_number), which should be recognized by any
# caller as a failure.
#

msg1='changing search order for system directory'
msg2='as it has already been specified as a non-system directory'
out=/tmp/gcc-$$.out
err=/tmp/gcc-$$.err
gcc.real "$@" >$out 2>$err
gcc_status=$?
cat $out
egrep -v "$msg1|$msg2" $err 1>&2
rm -f $out $err
exit $gcc_status
